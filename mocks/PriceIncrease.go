// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// PriceIncrease is an autogenerated mock type for the PriceIncrease type
type PriceIncrease struct {
	mock.Mock
}

// PriceIncrease provides a mock function with given fields: args
func (_m *PriceIncrease) PriceIncrease(args ...*sql.DB) (float64, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(...*sql.DB) (float64, error)); ok {
		return rf(args...)
	}
	if rf, ok := ret.Get(0).(func(...*sql.DB) float64); ok {
		r0 = rf(args...)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(...*sql.DB) error); ok {
		r1 = rf(args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewPriceIncrease interface {
	mock.TestingT
	Cleanup(func())
}

// NewPriceIncrease creates a new instance of PriceIncrease. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPriceIncrease(t mockConstructorTestingTNewPriceIncrease) *PriceIncrease {
	mock := &PriceIncrease{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
